module Proto.Server exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: proto/server.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias GetFileRequest =
    { path : String -- 1
    }


getFileRequestDecoder : JD.Decoder GetFileRequest
getFileRequestDecoder =
    JD.lazy <| \_ -> decode GetFileRequest
        |> required "path" JD.string ""


getFileRequestEncoder : GetFileRequest -> JE.Value
getFileRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "path" JE.string "" v.path)
        ]


type alias GetFileResponse =
    { jsonContent : String -- 1
    }


getFileResponseDecoder : JD.Decoder GetFileResponse
getFileResponseDecoder =
    JD.lazy <| \_ -> decode GetFileResponse
        |> required "jsonContent" JD.string ""


getFileResponseEncoder : GetFileResponse -> JE.Value
getFileResponseEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "jsonContent" JE.string "" v.jsonContent)
        ]


type alias UpdateFileRequest =
    { path : String -- 1
    , jsonContent : String -- 2
    , elmContent : String -- 3
    }


updateFileRequestDecoder : JD.Decoder UpdateFileRequest
updateFileRequestDecoder =
    JD.lazy <| \_ -> decode UpdateFileRequest
        |> required "path" JD.string ""
        |> required "jsonContent" JD.string ""
        |> required "elmContent" JD.string ""


updateFileRequestEncoder : UpdateFileRequest -> JE.Value
updateFileRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "path" JE.string "" v.path)
        , (requiredFieldEncoder "jsonContent" JE.string "" v.jsonContent)
        , (requiredFieldEncoder "elmContent" JE.string "" v.elmContent)
        ]
